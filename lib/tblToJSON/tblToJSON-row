(function ($) {
  'use strict';

  var TblToJSONRow = function (row, options) {
    this.$element = $(row);
    this.cells = [];
    this.options = $.extend({}, $.fn.tblToJSONRow.defaults, options);
    this.rowType = 'primary';
    this.init();
  };

  TblToJSONRow.prototype = {
    constructor: TblToJSONRow,

    id: function () {
      return this.$element.attr('id') ? this.$element.attr('id') : null;
    },

    cell: function (index) {
      if (index < this.cells.length) {
        return this.cells[index];
      } else {
        return null;
      }
    },

    // insert: function(index, cell){
    //   this.cells.splice(index, 0, cell);
    // },

    init: function () {
      // Init Cells
      var self = this;
      this.$element.children(this.options.cellSelector).each(function (cellIndex, cell) {
        self.cells.push($(cell).tblToJSONCell(cellIndex, self.options));
      });

      // Finalize init
      $.proxy(function () {
        /**
        Fired when row was initialized by `$().tableToJSON()` method.
        Please note that you should setup `init` handler **before** applying `tableToJSON`.

        @event init
        @param {Object} event event object
        @param {Object} editable TblToJSONRow instance
        **/
        this.$element.triggerHandler('init', this);
      }, this);
    }
  };

  // Initialize row
  $.fn.tblToJSONRow = function (options) {
    return new TblToJSONRow(this, options);
  };

  $.fn.tblToJSONRow.defaults = {
    /**
    Array of column indexes to include, all other columns are ignored. This takes precedence over ignoreColumns when provided.

    @type Array
    @default null
    **/
    onlyColumns: null,

    /**
    Array of column indexes to ignore.

    @type Array
    @default []
    **/
    ignoreColumns: [],
    cellSelector: 'td,th'
  };
})(jQuery);
